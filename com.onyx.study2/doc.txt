工作区:放置go源码的目录

src 源码
pkg 归档文件  .a文件


平台相关目录
GOOS
GOARCH  计算架构


测试源码文件
Benchmark或者Test开头的函数


//初始化init
import  _ "fmt"


init可以有多个,无参函数


go run 运行源码文件(可以多个,但是只能有一个主文件参数)
编译时候的参数:
-a 强制编译,无论编辑结果是否是已是最新的
-n 打印编译过程所需要的命令,但不真正执行他们
-p n 并行编译,n是并行数量(逻辑CPU个数)
-v 列出被编译的代码包名称
-a -v 列出被所有编译的名称
-work 显示编译时创建的临时工作目的路径,并且不删除它
-x 打印编译过程中所需运行的命令,真正的执行他们



go  ds   显示指定目录的目录结构

go  pds   显示指定代码包的依赖关系


go build 编译代码

编译后生成可执行文件,直接执行了

go install   编译并安装代码,在pkg 生成归档文件

go get 从远程代码仓库上下载并安装代码包
下载到$GOPATH下
-d  只下载不安装
-fix 下载后先修正,再编译安装
-u 利用网络更新已经安装的代码包


byte与rune类型有一个共性，即：它们都属于别名类型。byte是uint8的别名类型，而rune则是int32的别名类型。

byte类型的值需用8个比特位表示，其表示法与uint8类型无异。一个rune类型的值即可表示一个Unicode字符



字符串的表示法有两种，即：原生表示法和解释型表示法。若用原生表示法，需用反引号“`”把字符序列包裹起来。若用解释型表示法，
则需用双引号“"”包裹字符序列。

二者的区别是，前者表示的值是所见即所得的（除了回车符）。在那对反引号之间的内容就是该字符串值本身。
而后者所表示的值中的转义符会起作用并在程序编译期间被转义。所以，如此表示的字符串值的实际值可能会与我们看到的表象不相同。
